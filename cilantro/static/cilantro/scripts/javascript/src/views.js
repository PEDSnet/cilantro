// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['environ', 'mediator', 'jquery', 'use!underscore', 'use!backbone', 'charts'], function(environ, mediator, $, _, Backbone, Charts) {
    var Container, DataFiltersAccordian, FilterFieldSet, FilterForm, MultiEnumFieldSet, NumberFieldSet, QueryView, SingleEnumFieldSet, accordianGroupTmpl;
    Container = (function(_super) {

      __extends(Container, _super);

      Container.name = 'Container';

      function Container() {
        return Container.__super__.constructor.apply(this, arguments);
      }

      Container.prototype.className = 'area-container';

      Container.prototype.template = _.template('\
            <div class=heading></div>\
            <div class=content></div>\
        ');

      Container.prototype.initialize = function() {
        this.$el.html(this.template());
        this.heading = this.$el.find('.heading');
        return this.content = this.$el.find('.content');
      };

      return Container;

    })(Backbone.View);
    QueryView = (function(_super) {

      __extends(QueryView, _super);

      QueryView.name = 'QueryView';

      function QueryView() {
        this.update = __bind(this.update, this);
        return QueryView.__super__.constructor.apply(this, arguments);
      }

      QueryView.prototype.template = _.template('\
            <div class="area-container queryview">\
                <div class=heading>\
                    {{ name }} <small>{{ category }}</small>\
                </div>\
                <div class=btn-toolbar>\
                    <button data-toggle=detail class="btn btn-small"><i class=icon-info-sign></i></button>\
                </div>\
                <div class=details>\
                    <div class=description>{{ description }}</div>\
                </div>\
                <div class="content row-fluid">\
                    <div class="span6 controls"></div>\
                    <div class="span6 charts"></div>\
                </div>\
            </div>\
        ');

      QueryView.prototype.events = {
        'click [data-toggle=detail]': 'toggleDetail'
      };

      QueryView.prototype.initialize = function() {
        var attrs, cat,
          _this = this;
        attrs = {
          name: this.model.get('name'),
          category: (cat = this.model.get('category')) ? cat.name : '',
          description: this.model.get('description')
        };
        this.setElement(this.template(attrs));
        this.$heading = this.$el.find('.heading');
        this.$content = this.$el.find('.content');
        this.$details = this.$el.find('.details');
        this.$controls = this.$el.find('.controls');
        this.$charts = this.$el.find('.charts');
        return mediator.subscribe('queryview', function(id, action) {
          if (_this.model.get('id') === id && action === 'show') {
            _this.visible = true;
            return _this.render();
          } else {
            _this.visible = false;
            return _this.$el.detach();
          }
        });
      };

      QueryView.prototype.toggleDetail = function() {
        if (this.$details.is(':visible')) {
          return this.$details.slideUp(300);
        } else {
          return this.$details.slideDown(300);
        }
      };

      QueryView.prototype.render = function(event) {
        var form,
          _this = this;
        if (!this.loaded) {
          mediator.subscribe('datacontext/change', this.update);
          this.fieldCollection = new Backbone.Collection(this.model.get('fields'));
          form = new FilterForm({
            collection: this.fieldCollection
          });
          this.$controls.append(form.$el);
          this.charts = [];
          this.fieldCollection.each(function(model, i) {
            var chart;
            chart = new Charts.Distribution({
              editable: false
            });
            _this.charts.push([model, chart]);
            return _this.$charts.append(chart.$el);
          });
          this.pendingUpdate = true;
          this.loaded = true;
        }
        if (this.pendingUpdate) {
          this.update();
        }
        App.router.navigate('discover');
        return App.views.discover.$el.append(this.$el);
      };

      QueryView.prototype.update = function() {
        var chart, model, url, _i, _len, _ref, _ref1, _results;
        if (this.visible) {
          _ref = this.charts;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _ref1 = _ref[_i], model = _ref1[0], chart = _ref1[1];
            url = environ.absolutePath("/api/fields/" + model.id + "/dist/");
            _results.push(chart.renderChart(url, null, [model]));
          }
          return _results;
        } else {
          return this.pendingUpdate = true;
        }
      };

      return QueryView;

    })(Backbone.View);
    accordianGroupTmpl = _.template('\
        <div class=accordian-group>\
            <div class=accordian-heading>\
                <a class=accordian-toggle data-toggle=collapse data-parent={{ parent }} href=#{{ slug }}>{{ name }}</a>\
                <i class=icon-filter></i>\
            </div>\
            <div id={{ slug }} class="accordian-body collapse">\
                <ul class=nav></ul>\
            </div>\
        </div> \
    ');
    DataFiltersAccordian = (function(_super) {

      __extends(DataFiltersAccordian, _super);

      DataFiltersAccordian.name = 'DataFiltersAccordian';

      function DataFiltersAccordian() {
        this.render = __bind(this.render, this);
        return DataFiltersAccordian.__super__.constructor.apply(this, arguments);
      }

      DataFiltersAccordian.prototype.initialize = function() {
        return this.collection.on('reset', this.render);
      };

      DataFiltersAccordian.prototype.events = {
        'click [data-toggle=queryview]': 'showQueryview'
      };

      DataFiltersAccordian.prototype.render = function(collection) {
        var category, categoryName, group, groupName, id, model, _i, _len, _ref;
        this.$el.empty();
        _ref = collection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          if (!model.get('queryview')) {
            continue;
          }
          category = model.get('category');
          categoryName = category ? category.name : 'Other';
          if (!groupName || categoryName !== groupName) {
            groupName = categoryName;
            id = this.$el.prop('id');
            group = $(accordianGroupTmpl({
              name: groupName,
              parent: id,
              slug: "" + id + "-" + (groupName.toLowerCase())
            }));
            this.$el.append(group);
          }
          group.find('.nav').append($("<li><a href=# data-toggle=queryview data-target=" + model.id + ">" + (model.get('name')) + "</a> <i class=icon-filter></i></li>"));
        }
        return this.$el;
      };

      DataFiltersAccordian.prototype.showQueryview = function(event) {
        var targetId;
        event.preventDefault();
        targetId = $(event.target).data('target');
        return mediator.publish("queryview", targetId, 'show');
      };

      return DataFiltersAccordian;

    })(Backbone.View);
    FilterForm = (function(_super) {

      __extends(FilterForm, _super);

      FilterForm.name = 'FilterForm';

      function FilterForm() {
        return FilterForm.__super__.constructor.apply(this, arguments);
      }

      FilterForm.prototype.tagName = 'form';

      FilterForm.prototype.events = {
        'submit': 'preventDefault',
        'click [name=filter]': 'applyFilter',
        'click [name=exclude]': 'applyExclude'
      };

      FilterForm.prototype.template = _.template('\
            <div class=fieldsets></div>\
            <button class="btn success" name=filter>Filter</button>\
            <button class="btn danger" name=exclude>Exclude</button>\
        ');

      FilterForm.prototype.initialize = function() {
        var fieldsets, model, view, _i, _len, _ref, _results;
        this.$el.html(this.template());
        this.filterButton = this.$el.find('[name=filter]');
        this.excludeButton = this.$el.find('[name=exclude]');
        fieldsets = this.$el.find('.fieldsets');
        this.fieldsets = {};
        _ref = this.collection.models;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          if (model.get('data').enumerable) {
            view = new MultiEnumFieldSet({
              model: model
            });
          } else if (model.get('data').type === 'number') {
            view = new NumberFieldSet({
              model: model
            });
          } else {
            view = new FilterFieldSet({
              model: model
            });
          }
          fieldsets.append(view.$el);
          _results.push(this.fieldsets[model.id] = view);
        }
        return _results;
      };

      FilterForm.prototype.preventDefault = function(event) {
        return event.preventDefault();
      };

      FilterForm.prototype.applyFilter = function() {};

      FilterForm.prototype.applyExclude = function() {};

      return FilterForm;

    })(Backbone.View);
    FilterFieldSet = (function(_super) {

      __extends(FilterFieldSet, _super);

      FilterFieldSet.name = 'FilterFieldSet';

      function FilterFieldSet() {
        return FilterFieldSet.__super__.constructor.apply(this, arguments);
      }

      FilterFieldSet.prototype.tagName = 'fieldset';

      FilterFieldSet.prototype.template = _.template('\
            <select name=operator></select>\
            <input name=value>\
        ');

      FilterFieldSet.prototype.initialize = function(options) {
        var _this = this;
        this.$el.html(this.template());
        this.operator = this.$el.find('[name=operator]');
        this.value = this.$el.find('[name=value]');
        return $.each(this.model.get('operators'), function(i, choice) {
          var option;
          option = $("<option value=\"" + choice[0] + "\">" + choice[1] + "</option>");
          return _this.operator.append(option);
        });
      };

      FilterFieldSet.prototype.render = function(filter) {
        if (filter) {
          this.filter = filter;
          this.setOperator();
          return this.setValue();
        }
      };

      FilterFieldSet.prototype.getOperator = function() {
        return this.operator.val();
      };

      FilterFieldSet.prototype.getValue = function() {
        return this.value.val();
      };

      FilterFieldSet.prototype.setOperator = function() {
        return this.operator.val(this.filter.get('operator'));
      };

      FilterFieldSet.prototype.setValue = function() {
        return this.value.val(filter.get('value'));
      };

      FilterFieldSet.prototype.applyFilter = function() {
        return this.filter.set({
          value: this.getValue(),
          operator: this.getOperator(),
          negate: false
        });
      };

      FilterFieldSet.prototype.applyExclude = function() {
        return this.filter.set({
          value: this.getValue(),
          operator: this.getOperator(),
          negate: true
        });
      };

      return FilterFieldSet;

    })(Backbone.View);
    NumberFieldSet = (function(_super) {

      __extends(NumberFieldSet, _super);

      NumberFieldSet.name = 'NumberFieldSet';

      function NumberFieldSet() {
        return NumberFieldSet.__super__.constructor.apply(this, arguments);
      }

      NumberFieldSet.prototype.events = {
        'change [name=operator]': 'toggleOperator'
      };

      NumberFieldSet.prototype.template = _.template('\
            <select name=operator></select>\
            <input name=value>\
            <input name=value2>\
        ');

      NumberFieldSet.prototype.initialize = function() {
        NumberFieldSet.__super__.initialize.apply(this, arguments);
        return this.value2 = this.$el.find('[name=value2]').hide();
      };

      NumberFieldSet.prototype.getValue = function() {
        if (/between/.test(this.getOperator())) {
          return [this.value.val(), this.value2.val()];
        } else {
          return this.value.val();
        }
      };

      NumberFieldSet.prototype.setValue = function() {
        var value;
        value = this.filter.get('value');
        if (/between/.test(this.filter.get('operator'))) {
          this.value.val(value[0]);
          return this.value2.val(value[1]);
        } else {
          return this.value.val(value);
        }
      };

      NumberFieldSet.prototype.toggleOperator = function() {
        if (/between/.test(this.getOperator())) {
          return this.value2.show();
        } else {
          return this.value2.hide();
        }
      };

      return NumberFieldSet;

    })(FilterFieldSet);
    SingleEnumFieldSet = (function(_super) {

      __extends(SingleEnumFieldSet, _super);

      SingleEnumFieldSet.name = 'SingleEnumFieldSet';

      function SingleEnumFieldSet() {
        return SingleEnumFieldSet.__super__.constructor.apply(this, arguments);
      }

      SingleEnumFieldSet.prototype.template = _.template('\
            <select name=value></select>\
        ');

      SingleEnumFieldSet.prototype.initialize = function(options) {
        var _this = this;
        SingleEnumFieldSet.__super__.initialize.apply(this, arguments);
        return $.each(this.model.get('data').choices, function(i, choice) {
          var option;
          option = $("<option value=\"" + choice[0] + "\">" + choice[1] + "</option>");
          return _this.value.append(option);
        });
      };

      SingleEnumFieldSet.prototype.getOperator = function() {
        return 'in';
      };

      return SingleEnumFieldSet;

    })(FilterFieldSet);
    MultiEnumFieldSet = (function(_super) {

      __extends(MultiEnumFieldSet, _super);

      MultiEnumFieldSet.name = 'MultiEnumFieldSet';

      function MultiEnumFieldSet() {
        return MultiEnumFieldSet.__super__.constructor.apply(this, arguments);
      }

      MultiEnumFieldSet.prototype.template = _.template('\
            <select name=value multiple></select>\
        ');

      return MultiEnumFieldSet;

    })(SingleEnumFieldSet);
    return {
      Container: Container,
      DataFiltersAccordian: DataFiltersAccordian,
      FilterForm: FilterForm,
      FilterFieldSet: FilterFieldSet,
      NumberFieldSet: NumberFieldSet,
      SingleEnumFieldSet: SingleEnumFieldSet,
      MultiEnumFieldSet: MultiEnumFieldSet,
      QueryView: QueryView
    };
  });

}).call(this);
