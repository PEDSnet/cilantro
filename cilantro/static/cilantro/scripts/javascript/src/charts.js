// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['environ', 'jquery', 'use!backbone', 'charts/utils', 'backbone.charts'], function(eviron, $, Backbone, utils) {
    var DataFieldDistribution, DistributionChart, chartTmpl, urlTmpl;
    urlTmpl = _.template('/api/fields/{{ id }}/dist/');
    chartTmpl = _.template('\
        <div class=btn-toolbar>\
            <div class=btn-group>\
                <button class="btn btn-mini fullsize" title="Toggle Fullsize"><i class=icon-resize-full alt="Toggle Fullsize"></i></button>\
                <!--<button class="btn btn-mini outliers" title="Show Outliers" disabled><i class=icon-eye-open alt="Show Outliers"></i></button>-->\
            </div>\
            <div class=btn-group>\
                <button class="btn btn-mini edit" title="Edit"><i class=icon-wrench alt="Edit"></i></button>\
            </div>\
            <div class=btn-group>\
                <button class="btn btn-danger btn-mini remove" title="Remove"><i class=icon-remove alt="Remove"></i></button>\
            </div>\
        </div>\
        <div class=heading></div>\
        <div class=editable>\
            <form class=form-inline>\
                <label>X-Axis <select name=x-axis></select></label>\
                <label>Y-Axis <select name=y-axis></select></label>\
                <label>Series <select name=series></select></label>\
                <button class="btn btn-primary">Update</button>\
            </form>\
        </div>\
        <div class=chart></div>\
    ');
    DataFieldDistribution = (function(_super) {

      __extends(DataFieldDistribution, _super);

      DataFieldDistribution.name = 'DataFieldDistribution';

      function DataFieldDistribution() {
        return DataFieldDistribution.__super__.constructor.apply(this, arguments);
      }

      DataFieldDistribution.prototype.tagName = 'select';

      DataFieldDistribution.prototype.initialize = function(options) {
        this.enumerableOnly = options.enumerableOnly;
        this.collection.on('reset', this.render);
        if (this.collection.models[0]) {
          return this.render();
        }
      };

      DataFieldDistribution.prototype.render = function() {
        var data, model, _i, _len, _ref;
        this.$el.append('<option value=>---</option>');
        _ref = this.collection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          data = model.get('data');
          if (this.enumerableOnly && !data.enumerable) {
            continue;
          }
          this.$el.append("<option value=" + model.id + ">" + (model.get('name')) + " [" + (model.get('model_name')) + "]</option>");
        }
      };

      DataFieldDistribution.prototype.getSelected = function() {
        return this.collection.get(parseInt(this.$el.val()));
      };

      return DataFieldDistribution;

    })(Backbone.View);
    DistributionChart = (function(_super) {

      __extends(DistributionChart, _super);

      DistributionChart.name = 'DistributionChart';

      function DistributionChart() {
        return DistributionChart.__super__.constructor.apply(this, arguments);
      }

      DistributionChart.prototype.className = 'area-container chart-container';

      DistributionChart.prototype.events = {
        'mouseenter': 'showToolbar',
        'mouseleave': 'hideToolbar',
        'click .fullsize': 'toggleFullsize',
        'click .outliers': 'toggleOutliers',
        'click .edit': 'toggleEdit',
        'click .remove': 'removeChart',
        'submit': 'updateChart'
      };

      DistributionChart.prototype.initialize = function(options) {
        var contents;
        this.$el.html((contents = $(chartTmpl())));
        this.clusterLabel = $('<span class="label label-info">Clustered</span>');
        this.heading = this.$el.find('.heading');
        this.renderArea = this.$el.find('.chart');
        this.toolbar = this.$el.find('.btn-toolbar');
        this.fullsizeToggle = this.$el.find('.fullsize');
        if (options && options.editable === false) {
          this.$('.editable').detach();
        } else {
          this.xAxis = new DataFieldDistribution({
            el: this.$el.find('[name=x-axis]'),
            collection: this.collection
          });
          this.yAxis = new DataFieldDistribution({
            el: this.$el.find('[name=y-axis]'),
            collection: this.collection
          });
          this.series = new DataFieldDistribution({
            el: this.$el.find('[name=series]'),
            enumerableOnly: true,
            collection: this.collection
          });
        }
        return this.delegateEvents();
      };

      DistributionChart.prototype.render = function(options) {
        if (this.chart) {
          this.chart.destroy();
        }
        this.clusterLabel.hide().detach();
        this.heading.text(options.title.text);
        options.title.text = '';
        if (!options.series[0]) {
          this.renderArea.html('<h3 class=no-data>One or more of the selected\
                    dimensions does not contain any data. Please change your selection.</h3>');
          return;
        }
        this.$('.editable').hide();
        if (options.clustered) {
          this.heading.append(' ');
          this.heading.append(this.clusterLabel.show());
        }
        $.extend(true, options, this.chartOptions);
        options.chart.renderTo = this.renderArea[0];
        return this.chart = new Highcharts.Chart(options);
      };

      DistributionChart.prototype.toggleFullsize = function() {
        var chartWidth;
        this.fullsizeToggle.children('i').toggleClass('icon-resize-full icon-resize-small');
        if (this.$el.hasClass('expanded')) {
          this.fullsize = false;
          this.$el.removeClass('expanded');
        } else {
          this.fullsize = true;
          this.$el.addClass('expanded');
        }
        chartWidth = this.renderArea.width();
        if (this.chart) {
          return this.chart.setSize(chartWidth, null, false);
        }
      };

      DistributionChart.prototype.hideToolbar = function() {
        return this.toolbar.fadeOut(200);
      };

      DistributionChart.prototype.showToolbar = function() {
        return this.toolbar.fadeIn(200);
      };

      DistributionChart.prototype.toggleOutliers = function(event) {
        var series, _i, _len, _ref, _results;
        _ref = this.chart.series;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          series = _ref[_i];
          continue;
        }
        return _results;
      };

      DistributionChart.prototype.toggleEdit = function(event) {
        var target;
        target = this.$('.editable');
        if (target.is(':visible')) {
          return target.slideUp(300);
        } else {
          return target.slideDown(300);
        }
      };

      DistributionChart.prototype.removeChart = function(event) {
        if (this.chart) {
          this.chart.destroy();
        }
        this.$el.remove();
        if (this.model) {
          return this.model.destroy();
        }
      };

      DistributionChart.prototype.renderChart = function(url, data, fields, seriesIdx) {
        var _this = this;
        return Backbone.ajax({
          url: url,
          data: data,
          beforeSend: function() {
            return _this.renderArea.addClass('loading');
          },
          success: function(resp) {
            var options;
            _this.renderArea.removeClass('loading');
            options = utils.processResponse(resp, fields, seriesIdx);
            return _this.render(options);
          }
        });
      };

      DistributionChart.prototype.updateChart = function(event) {
        var c, data, fields, seriesIdx, url, x, y;
        event.preventDefault();
        x = this.xAxis.getSelected();
        y = this.yAxis.getSelected();
        c = this.series.getSelected();
        if (!x) {
          return;
        }
        url = urlTmpl({
          id: x.id
        });
        fields = [];
        data = '';
        if (x) {
          fields.push(x);
          data += 'dimension=' + x.id + '&';
        }
        if (y) {
          fields.push(y);
          data += 'dimension=' + y.id + '&';
        }
        if (c) {
          seriesIdx = y ? 2 : 1;
          data += 'dimension=' + c.id;
        }
        return this.renderChart(url, data, fields, seriesIdx);
      };

      return DistributionChart;

    })(Backbone.Chart);
    return {
      Distribution: DistributionChart
    };
  });

}).call(this);
