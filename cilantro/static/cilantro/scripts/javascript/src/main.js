// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['environ', 'jquery', 'use!underscore', 'use!backbone', 'panels', 'charts', 'views', 'serrano', 'use!jquery.ui'], function(environ, $, _, Backbone, panels, Charts, views, Serrano) {
    return $(function() {
      var Analyze, App, DataConcepts, DataFields, Discover, Distributions, Review, Router, View, Workspace, analyze, dataFiltersAccordian, discover, review, workspace;
      window.App = App = {};
      App.subnav = $('#subnav .container-fluid');
      DataFields = (function(_super) {

        __extends(DataFields, _super);

        DataFields.name = 'DataFields';

        function DataFields() {
          return DataFields.__super__.constructor.apply(this, arguments);
        }

        DataFields.prototype.url = environ.absolutePath('/api/fields/');

        return DataFields;

      })(Serrano.DataFields);
      DataConcepts = (function(_super) {

        __extends(DataConcepts, _super);

        DataConcepts.name = 'DataConcepts';

        function DataConcepts() {
          return DataConcepts.__super__.constructor.apply(this, arguments);
        }

        DataConcepts.prototype.url = environ.absolutePath('/api/concepts/');

        return DataConcepts;

      })(Serrano.DataConcepts);
      Distributions = (function(_super) {

        __extends(Distributions, _super);

        Distributions.name = 'Distributions';

        function Distributions() {
          return Distributions.__super__.constructor.apply(this, arguments);
        }

        Distributions.prototype.url = environ.absolutePath('/api/distributions/');

        return Distributions;

      })(Serrano.Distributions);
      App.DataField = new DataFields;
      App.DataConcept = new DataConcepts;
      App.Distribution = new Distributions;
      dataFiltersAccordian = new views.DataFiltersAccordian({
        el: '#data-filters-accordian',
        collection: App.DataConcept
      });
      App.DataConcept.on('reset', function(collection) {
        return collection.each(function(model, i) {
          if (model.get('queryview')) {
            return new views.QueryView({
              model: model
            });
          }
        });
      });
      View = (function(_super) {

        __extends(View, _super);

        View.name = 'View';

        function View() {
          return View.__super__.constructor.apply(this, arguments);
        }

        View.prototype.initialize = function() {};

        View.prototype.load = function() {
          this.area = this.$el;
          return this.area.fadeIn();
        };

        View.prototype.unload = function() {
          this.area = this.$el;
          return this.area.hide();
        };

        View.prototype.destroy = function() {};

        return View;

      })(Backbone.View);
      Workspace = (function(_super) {

        __extends(Workspace, _super);

        Workspace.name = 'Workspace';

        function Workspace() {
          return Workspace.__super__.constructor.apply(this, arguments);
        }

        Workspace.prototype.id = '#workspace-area';

        Workspace.prototype.initialize = function() {
          this.area = this.$el;
          this.activity = new views.Container;
          this.activity.$el.addClass('span4');
          this.activity.heading.text('Activity');
          this.queries = new views.Container;
          this.queries.$el.addClass('span4');
          this.queries.heading.text('Queries');
          return this.area.hide().appendTo('#main-area .inner').addClass('row-fluid').append(this.activity.el, this.queries.el);
        };

        return Workspace;

      })(View);
      Discover = (function(_super) {

        __extends(Discover, _super);

        Discover.name = 'Discover';

        function Discover() {
          return Discover.__super__.constructor.apply(this, arguments);
        }

        Discover.prototype.id = '#discover-area';

        Discover.prototype.initialize = function() {
          this.area = this.$el;
          return this.area.css('margin-left', '250px').appendTo('#main-area .inner');
        };

        return Discover;

      })(View);
      Analyze = (function(_super) {

        __extends(Analyze, _super);

        Analyze.name = 'Analyze';

        function Analyze() {
          return Analyze.__super__.constructor.apply(this, arguments);
        }

        Analyze.prototype.id = '#analyze-area';

        Analyze.prototype.initialize = function() {
          var _this = this;
          this.area = this.$el;
          this.toolbar = $('<ul>').addClass('nav pull-right').hide().appendTo(App.subnav);
          this.addDistributionButton = $('<button>').addClass('btn').append('<i>').find('i').addClass('icon-signal').end();
          this.area.appendTo('#main-area .inner').addClass('row-fluid').sortable({
            items: '> .chart-container',
            handle: '.heading'
          });
          this.toolbar.append(this.addDistributionButton);
          return this.addDistributionButton.on('click', function(event) {
            var view;
            view = new Charts.Distribution({
              collection: App.DataField
            });
            return _this.area.append(view.$el);
          });
        };

        Analyze.prototype.load = function() {
          Analyze.__super__.load.apply(this, arguments);
          return this.toolbar.fadeIn();
        };

        Analyze.prototype.unload = function() {
          Analyze.__super__.unload.apply(this, arguments);
          return this.toolbar.hide();
        };

        return Analyze;

      })(View);
      Review = (function(_super) {

        __extends(Review, _super);

        Review.name = 'Review';

        function Review() {
          return Review.__super__.constructor.apply(this, arguments);
        }

        Review.prototype.id = '#review-area';

        Review.prototype.initialize = function() {
          return this.$el.appendTo('#main-area .inner');
        };

        return Review;

      })(View);
      Router = (function(_super) {

        __extends(Router, _super);

        Router.name = 'Router';

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.initialize = function() {
          var appLinks,
            _this = this;
          (appLinks = $('[data-route]')).on('click', function(event) {
            event.preventDefault();
            return App.router.navigate(this.pathname, {
              trigger: true
            });
          }).each(function(i, el) {
            var links, page;
            page = $(el).data('route');
            links = appLinks.filter("[data-route=" + page + "]");
            return _this.on("route:" + page, function() {
              appLinks.parent().removeClass('active');
              return links.parent().addClass('active');
            });
          });
          return $('.modal').modal({
            show: false
          });
        };

        return Router;

      })(Backbone.Router);
      App.router = new Router;
      App.views = {};
      App.loaded = [];
      App.register = function(route, name, view) {
        var _this = this;
        App.views[name] = view;
        return this.router.route(route, name, function() {
          var _i, _len, _name, _ref, _ref1, _ref2;
          if (!App._routing) {
            App._routing = true;
            _ref = _this.loaded;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              _name = _ref[_i];
              if ((_ref1 = App.views[_name]) != null) {
                _ref1.unload();
              }
            }
            _this.loaded = [];
            _.defer(function() {
              return App._routing = false;
            });
          }
          if ((_ref2 = App.views[name]) != null) {
            _ref2.load();
          }
          return _this.loaded.push(name);
        });
      };
      workspace = new Workspace;
      discover = new Discover;
      analyze = new Analyze;
      review = new Review;
      App.register('', 'workspace', workspace);
      App.register('discover/', 'discover', discover);
      App.register('analyze/', 'analyze', analyze);
      App.register('review/', 'review', review);
      Backbone.history.start({
        pushState: true
      });
      App.DataField.fetch();
      return App.DataConcept.fetch();
      /*
              $('[data-toggle=chosen]').chosen
                  allow_single_deselect: true
      
              $('[data-toggle=chosen-ajax]').each ->
                  select = $(this)
                  url = select.data('url')
                  input = $('#' + select.attr('id') + '_chzn')
                  select.ajaxChosen
                      url: url
                  , (resp) ->
                      data = {}
                      i = 0
      
                      while i < resp.length
                  </div>
              '
      */

    });
  });

}).call(this);
